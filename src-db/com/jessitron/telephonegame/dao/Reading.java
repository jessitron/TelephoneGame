package com.jessitron.telephonegame.dao;

import com.jessitron.telephonegame.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table READING.
 */
public class Reading {

    private Long id;
    private long gameId;
    /** Not-null value. */
    private java.util.Date completeTimestamp;
    /** Not-null value. */
    private String startingText;
    /** Not-null value. */
    private String endingText;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private ReadingDao myDao;

    private Game game;
    private Long game__resolvedKey;


    public Reading() {
    }

    public Reading(Long id) {
        this.id = id;
    }

    public Reading(Long id, long gameId, java.util.Date completeTimestamp, String startingText, String endingText) {
        this.id = id;
        this.gameId = gameId;
        this.completeTimestamp = completeTimestamp;
        this.startingText = startingText;
        this.endingText = endingText;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReadingDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getGameId() {
        return gameId;
    }

    public void setGameId(long gameId) {
        this.gameId = gameId;
    }

    /** Not-null value. */
    public java.util.Date getCompleteTimestamp() {
        return completeTimestamp;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCompleteTimestamp(java.util.Date completeTimestamp) {
        this.completeTimestamp = completeTimestamp;
    }

    /** Not-null value. */
    public String getStartingText() {
        return startingText;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStartingText(String startingText) {
        this.startingText = startingText;
    }

    /** Not-null value. */
    public String getEndingText() {
        return endingText;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEndingText(String endingText) {
        this.endingText = endingText;
    }

    /** To-one relationship, resolved on first access. */
    public Game getGame() {
        if (game__resolvedKey == null || !game__resolvedKey.equals(gameId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GameDao targetDao = daoSession.getGameDao();
            game = targetDao.load(gameId);
            game__resolvedKey = gameId;
        }
        return game;
    }

    public void setGame(Game game) {
        if (game == null) {
            throw new DaoException("To-one property 'gameId' has not-null constraint; cannot set to-one to null");
        }
        this.game = game;
        gameId = game.getId();
        game__resolvedKey = gameId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
