package com.jessitron.telephonegame.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.jessitron.telephonegame.dao.Game;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAME.
*/
public class GameDao extends AbstractDao<Game, Long> {

    public static final String TABLENAME = "GAME";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartingText = new Property(1, String.class, "startingText", false, "STARTING_TEXT");
        public final static Property EndingText = new Property(2, String.class, "endingText", false, "ENDING_TEXT");
        public final static Property StartTimestamp = new Property(3, java.util.Date.class, "startTimestamp", false, "START_TIMESTAMP");
    };

    private DaoSession daoSession;


    public GameDao(DaoConfig config) {
        super(config);
    }
    
    public GameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'GAME' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'STARTING_TEXT' TEXT NOT NULL ," + // 1: startingText
                "'ENDING_TEXT' TEXT," + // 2: endingText
                "'START_TIMESTAMP' INTEGER NOT NULL );"; // 3: startTimestamp
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Game entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getStartingText());
 
        String endingText = entity.getEndingText();
        if (endingText != null) {
            stmt.bindString(3, endingText);
        }
        stmt.bindLong(4, entity.getStartTimestamp().getTime());
    }

    @Override
    protected void attachEntity(Game entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Game readEntity(Cursor cursor, int offset) {
        Game entity = new Game( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // startingText
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // endingText
            new java.util.Date(cursor.getLong(offset + 3)) // startTimestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Game entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartingText(cursor.getString(offset + 1));
        entity.setEndingText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartTimestamp(new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected Long updateKeyAfterInsert(Game entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Game entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
